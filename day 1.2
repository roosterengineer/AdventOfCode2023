#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int sum = 0;

typedef struct Storage_struct {
  int value;
  int position;
  char alpha;
} Storage;

Storage shelf[1000];
int n = 0;
/*
void seek(char* str) {
  char* fetch;
  
  fetch = strstr(str, "one");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 1;
    shelf[n].alpha = '1';
    n++;
  }

  fetch = strstr(str, "1");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 1;
    shelf[n].alpha = '1';
    n++;
  }

  fetch = strstr(str, "two");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 2;
    shelf[n].alpha = '2';
    n++;
  }

  fetch = strstr(str, "2");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 2;
    shelf[n].alpha = '2';
    n++;
  }

  fetch = strstr(str, "three");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 3;
    shelf[n].alpha = '3';
    n++;
  }

  fetch = strstr(str, "3");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 3;
    shelf[n].alpha = '3';
    n++;
  }

  fetch = strstr(str, "four");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 4;
    shelf[n].alpha = '4';
    n++;
  }

  fetch = strstr(str, "4");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 4;
    shelf[n].alpha = '4';
    n++;
  }

  fetch = strstr(str, "five");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 5;
    shelf[n].alpha = '5';
    n++;
  }

  fetch = strstr(str, "5");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 5;
    shelf[n].alpha = '5';
    n++;
  }

  fetch = strstr(str, "six");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 6;
    shelf[n].alpha = '6';
    n++;
  }

  fetch = strstr(str, "6");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 6;
    shelf[n].alpha = '6';
    n++;
  }

  fetch = strstr(str, "seven");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 7;
    shelf[n].alpha = '7';
    n++;
  }

  fetch = strstr(str, "7");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 7;
    shelf[n].alpha = '7';
    n++;
  }

  fetch = strstr(str, "eight");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 8;
    shelf[n].alpha = '8';
    n++;
  }

  fetch = strstr(str, "8");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 8;
    shelf[n].alpha = '8';
    n++;
  }

  fetch = strstr(str, "nine");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 9;
    shelf[n].alpha = '9';
    n++;
  }

  fetch = strstr(str, "9");
  if (fetch != NULL) {
    shelf[n].position = fetch - str;
    shelf[n].value = 9;
    shelf[n].alpha = '9';
    n++;
  }

  n = 0;
  printf("SEEK COMPLETE!\n");
}
*/

/*
void order (Storage* stg) {
  int m, o;
  int low_pos = 0;
  char add[3];
  Storage tmp[1000];
  Storage swap;
  for (m = 0; m < 999; m++) {
    low_pos = m;
    for (o = m + 1; o < 1000; o++) {
      if (stg[o].position < stg[low_pos].position) {
        low_pos = o;
      }
    }
    swap = stg[m];
    stg[m] = stg[low_pos];
    stg[low_pos] = swap;
  }

  for (m = 0; m < 1000; m++) {
    printf("%c", stg[m].alpha);
  }
  printf("\n");

  printf("STG[0] = %c, STG[1] = %c\n", stg[0].alpha, stg[999].alpha);
  add[0] = stg[0].alpha;
  add[1] = stg[999].alpha;
  add[2] = '\0';
  printf("%d\n", atoi(add));

  sum += atoi(add);

  memset(shelf, 0, sizeof(shelf));
  
  
  for (m = 0; m < 1000; m++) {
    shelf[m].alpha = '\0';
    shelf[m].value = 0;
    shelf[m].position = 0;
  }
  
}
*/

char* R_Seek (char* str, char* terms[], int num_of_terms) {
  int len = strlen(str);
  int i, j;
  for (i = len - 1; i >= 0; i--) {
    for (j = 0; j < num_of_terms; j++) {
      char* search_term = terms[j];
      int term_len = strlen(terms[j]);
      if (i + term_len <= len) {
        if(strncmp(str + i, search_term, term_len) == 0) {
          return search_term;
        }
      }
      
    }
  }
  return NULL;
}

char* L_Seek (char* str, char* terms[], int num_of_terms) {
  int len = strlen(str);
  int i, j;
  for (i = 0; i < len; i++) {
    for (j = 0; j < num_of_terms; j++) {
      char* search_term = terms[j];
      int term_len = strlen(terms[j]);
      if (i + term_len <= len) {
        if(strncmp(str + i, search_term, term_len) == 0) {
          return search_term;
        }
      }

    }
  }
  return NULL;
}

char* convert_alpha (char* item) {
  if (strcmp(item, "one") == 0) {
    return "1";
  }
  else if (strcmp(item, "two") == 0) {
    return "2";
  }
  else if (strcmp(item, "three") == 0) {
    return "3";
  }
  else if (strcmp(item, "four") == 0) {
    return "4";
  }
  else if (strcmp(item, "five") == 0) {
    return "5";
  }
  else if (strcmp(item, "six") == 0) {
    return "6";
  }
  else if (strcmp(item, "seven") == 0) {
    return "7";
  }
  else if (strcmp(item, "eight") == 0) {
    return "8";
  }
  else if (strcmp(item, "nine") == 0) {
    return "9";
  }
  else {
    return item;
  }
}

int main(void) {
  FILE *readFile;
  readFile = fopen("input.txt", "r");
  char* word_bank[] = {"one", "1", "two", "2", "three", "3", "four", "4",
                    "five", "5", "six", "6", "seven", "7", "eight", "8",
                    "nine", "9"};
  char* segment = NULL;
  size_t segment_size = 0;
  int sum = 0;
  
  while (getline(&segment, &segment_size, readFile) != -1) {
    char tmp[128];
    strcpy(tmp, convert_alpha(L_Seek(segment, word_bank, 18)));
    strcat(tmp, convert_alpha(R_Seek(segment, word_bank, 18)));
    
    sum += atoi(tmp);
  }

  printf("||%d||\n", sum);
}
