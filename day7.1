#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Hand_struct {
  int group;
  int wager;
  char raw[5];
} Hand;

Hand hand_clean(char* str) {
  Hand hold;
  int run = 0;
  char *ptr = NULL;
  ptr = strtok(str, " ");
  while (ptr != NULL) {
    switch (run) {
      case 0:
        strcpy(hold.raw, ptr);
        run++;
        //printf("raw: %s\n", hold.raw);
        break;
      case 1:
        hold.wager = atoi(ptr);
        run = 0;
        //printf("wager: %d\n", hold.wager);
        break;
    }
    ptr = strtok(NULL, " ");
  }
  return hold;
}

void hand_group(Hand *hand) {
  int a, b;
  char target = '\0';
  int target_count = 0;
  char most_target = '\0';
  int max = 0;
  char next_most_target = '\0';
  int next_max = 0;
  
  for (a = 0; a < strlen(hand->raw); a++) {
    target = hand->raw[a];
    //printf("target: %c\n", target);
    for (b = 0; b < strlen(hand->raw); b++) {
      if (hand->raw[b] == target) {
        target_count++;
        //printf("target_count: %d\n", target_count);
      }
    }
    if (target_count > max) {
      most_target = target;
      max = target_count;
    }
    target_count = 0;
  }

  if (max == 3 || max == 2) {
    for (a = 0; a < strlen(hand->raw); a++) {
      target = hand->raw[a];
      if (target != most_target) {
        for (b = 0; b < strlen(hand->raw); b++) {
          if (hand->raw[b] == target) {
            target_count++;
          }
          if (target_count >= next_max) {
            next_most_target = target;
            next_max = target_count;
          }
        }
        target_count = 0;
      }
    }
  }

  if (max == 5) {
    hand->group = 7;
  }
  else if (max == 4) {
    hand->group = 6;
  }
  else if (max == 3) {
    if (next_max == 2) {
      hand->group = 5;
    }
    else {
      hand->group = 4;
    }
  }
  else if (max == 2) {
    if (next_max == 2) {
      hand->group = 3;
    }
    else {
      hand->group = 2;
    }
  }
  else {
    hand->group = 1;
  }
  /*
  printf("most_target: %c\n", most_target);
  printf("max: %d\n", max);
  printf("next_most_target: %c\n", next_most_target);
  printf("next_max: %d\n", next_max);
  */
}

int convert(char ch) {
  int res;
  switch (ch) {
    case 'A':
      res = 14;
      break;
    case 'K':
      res = 13;
      break;
    case 'Q':
      res = 12;
      break;
    case 'J':
      res = 11;
      break;
    case 'T':
      res = 10;
      break;
    case '9':
      res = 9;
      break;
    case '8':
      res = 8;
      break;
    case '7':
      res = 7;
      break;
    case '6':
      res = 6;
      break;
    case '5':
      res = 5;
      break;
    case '4':
      res = 4;
      break;
    case '3':
      res = 3;
      break;
    case '2':
      res = 2;
      break;
      
  }
  return res;
}

int tie_break(char *str1, char *str2) {
  int c;
  for (c = 0; c < 5; c++) {
    if (str1[c] == str2[c]) {
      continue;
    }
    else {
      if (convert(str1[c]) > convert(str2[c])) {
        return 1;
      }
      else {
        return 0;
      }
      continue;
    }
  }
}


int main(void) {
  // Read in file and copy each line to an array.
  FILE* read_file = NULL;
  read_file = fopen("input.txt", "r");
  char* segment = NULL;
  size_t segment_size = 0;
  int count = 0;

  while(getline(&segment, &segment_size, read_file) != -1) {
    count++;
  }

  rewind(read_file);

  char* card_pile[count];
  int i, j;

  for (i = 0; i < count; i++) {
    getline(&segment, &segment_size, read_file);
    card_pile[i] = (char*)malloc(strlen(segment) + 1);
    strcpy(card_pile[i], segment);
  }

  // Solving the problem
  Hand unsorted[count];
  
  for (i = 0; i < count; i++) {
    unsorted[i] = hand_clean(card_pile[i]);
    //printf("wager: %d\n", unsorted[i].wager);
    hand_group(&unsorted[i]);
    //printf("hand: %s, group: %d\n", unsorted[i].raw, unsorted[i].group);
  }

  int big_index;
  Hand tmp;
  for (i = 0; i < count; i++) {
    big_index = i;
    for (j = i + 1; j < count; j++) {
      if (unsorted[j].group >= unsorted[big_index].group) {
        if (unsorted[j].group == unsorted[big_index].group) {
          if (tie_break(unsorted[j].raw, unsorted[big_index].raw) > 0) {
            big_index = j;
          }
        }
        else {
          big_index = j;
        }
      }
    }
    tmp = unsorted[i];
    unsorted[i] = unsorted[big_index];
    unsorted[big_index] = tmp;
  }

  int sum = 0;
  
  for (i = 0; i < count; i++) {
    printf("%s\n", unsorted[i].raw);
    sum += (count - i) * unsorted[i].wager;
  }

  printf("\n||%d||\n", sum);
}
